(system-include "time.h")
(system-include "threads.h")
(relative-include "test.c")
(add-cflag "-lpthread")

(register-type Thread "thrd_t")
(register-type Mutex "mtx_t")

(defmodule Thread
  (register get (Fn [] Thread) "get_thread")
  (register success Int "thrd_success")
  (register timed-out Int "thrd_timedout")
  (register busy Int "thrd_busy")
  (register no-memory Int "thrd_nomem")
  (register error Int "thrd_error")

  (private create-internal)
  (register create-internal (Fn [(Fn [(Ptr ())] Int) (Ptr ()) (Ptr Int)] Thread) "carp_thrd_create")
  (doc create "Start a thread running the given function.")
  (sig create (Fn [(Fn [(Ptr ())] Int) (Ptr ())] (Result Thread Int)))
  (defn create [func arg]
    (let [result 0
          thread (create-internal func arg (address result))]
      (if (= result success)
        (Result.Success thread)
        (Result.Error result))))

  (doc from-fn "Start a thread running the given lambda function")
  (register from-fn-internal (Fn [(Fn [(Ptr ())] Int) (Ptr ()) (Ptr Int)] Thread) "carp_thrd_fn_create")
  (defn from-fn [func arg]
    (let [result 0
          thread (from-fn-internal func arg (address result))]
      (if (= result success)
        (Result.Success thread)
        (Result.Error result))))

  (register equal (Fn [Thread Thread] Int) "thrd_equal")
  (doc current "Get the current thread")
  (register current (Fn [] Thread) "thrd_current")
  (doc sleep
       "Block the current thread's execution for at least the given time. (seconds nanoseconds)
If there is an error or interrupting signal, the return value will be less than 0")
  (register sleep (Fn [Long Long] Int) "carp_thrd_sleep")
  (register yield (Fn [] ()) "thrd_yield")
  (register exit (Fn [] Int) "thrd_exit")
  (register detach (Fn [Thread] Int) "thrd_detach")
  (register join (Fn [Thread (Ptr Int)] Int) "thrd_join"))

(defmodule Mutex
  (register init (Fn [(Ptr Mutex) Int] Int) "mtx_init"))
