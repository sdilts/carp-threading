(load "main.carp")

(sig run-callback (Fn [&(Array a) (Ptr (Array a)) &(Fn [&a] a) Int Int] Int))
(defn run-callback [arr result func start end]
  (let-do [callback (fn [dest]
                      (do
                        (for [i start end]
                          (Array.aset-uninitialized! (Pointer.to-ref (the (Ptr (Array a)) (Unsafe.coerce dest)))
                                                     i (~func (Array.unsafe-nth arr i))))
                        0))
           return-val 0
           thread (Thread.from-fn &callback (Unsafe.coerce result))]
    (match thread
      (Result.Success thrd) (Thread.join thrd (address return-val))
      (Result.Error err) err)))

(sig test (Fn [] (Array Double)))
(defn test []
  (let [arr [1.0 2.0 3.0 4.0]
        dest (Array.allocate 4)
        start 0
        end 4
        success (run-callback &arr (address dest) &(fn [x] (* 2.0 (copy x))) start end)]
    dest))
